<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Aspose.EPS</name>
  </assembly>
  <members>
    <member name="T:Aspose.EPS.BuildVersionInfo">
      <summary>
            This class provides information about current product build.
            </summary>
    </member>
    <member name="F:Aspose.EPS.BuildVersionInfo.AssemblyVersion">
      <summary>
            Assembly Version
            </summary>
    </member>
    <member name="F:Aspose.EPS.BuildVersionInfo.Product">
      <summary>
            Product Name
            </summary>
    </member>
    <member name="F:Aspose.EPS.BuildVersionInfo.FileVersion">
      <summary>
            File Version
            </summary>
    </member>
    <member name="T:Aspose.EPS.License">
      <summary>
            Provides methods to license the component.
            </summary>
      <example>
            In this example, an attempt will be made to find a license file named MyLicense.lic
            in the folder that contains 
            
            
            the component, in the folder that contains the calling assembly,
            in the folder of the entry assembly and then in the embedded resources of the calling assembly.
            <code>
            [C#]
            
            License license = new License();
            license.SetLicense("MyLicense.lic");
            
            
            [Visual Basic]
            
            Dim license As license = New license
            License.SetLicense("MyLicense.lic")
            </code></example>
    </member>
    <member name="P:Aspose.EPS.License.Embedded">
      <summary>
            License number was added as embedded resource.
            </summary>
    </member>
    <member name="M:Aspose.EPS.License.SetLicense(System.String)">
      <summary>
            Licenses the component.
            </summary>
      <remarks>
        <p>Tries to find the license in the following locations:</p>
        <p>1. Explicit path.</p>
        <p>2. The folder of the component assembly.</p>
        <p>3. The folder of the client's calling assembly.</p>
        <p>4. The folder of the entry assembly.</p>
        <p>5. An embedded resource in the client's calling assembly.</p>
        <p>
          <b>Note:</b>On the .NET Compact Framework, tries to find the license only in these locations:</p>
        <p>1. Explicit path.</p>
        <p>2. An embedded resource in the client's calling assembly.</p>
      </remarks>
      <example>
            In this example, an attempt will be made to find a license file named MyLicense.lic
            in the folder that contains 
            
            
            the component, in the folder that contains the calling assembly,
            in the folder of the entry assembly and then in the embedded resources of the calling assembly.
            <code>
            [C#]
            
            License license = new License();
            license.SetLicense("MyLicense.lic");
            
            
            [Visual Basic]
            
            Dim license As License = New License
            license.SetLicense("MyLicense.lic")
            </code><param name="licenseName">Can be a full or short file name or name of an embedded resource.
            Use an empty string to switch to evaluation mode.</param></example>
    </member>
    <member name="M:Aspose.EPS.License.SetLicense(System.IO.Stream)">
      <summary>
            Licenses the component.
            </summary>
      <param name="stream">A stream that contains the license.</param>
      <remarks>
        <p>Use this method to load a license from a stream.</p>
      </remarks>
      <example>
        <code>
            [C#]
            
            License license = new License();
            license.SetLicense(myStream);
            
            
            [Visual Basic]
            
            Dim license as License = new License
            license.SetLicense(myStream)
            </code>
      </example>
    </member>
    <!-- Badly formed XML comment ignored for member "M:Aspose.EPS.Graphics2d.TagHandler.Parse(Aspose.EPS.Graphics2d.TagString)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.EPS.GraphicsIO.AbstractVectorGraphicsIO.#ctor(System.Drawing.Size,System.Boolean)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.EPS.GraphicsIO.AbstractVectorGraphicsIO.#ctor(Aspose.EPS.GraphicsIO.Control,System.Boolean)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.EPS.GraphicsIO.Font.Encoding.Lookup.GetTable(System.String)" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.EPS.GraphicsIO.Font.FontEmbedder" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.EPS.GraphicsIO.Font.FontEmbedder.WriteGlyph(System.String,System.Drawing.Drawing2D.GraphicsPath,Aspose.TrueType.TTGlyph)" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.EPS.GraphicsIO.Font.FontEmbedderType1" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.EPS.GraphicsIO.Font.FontIncluder" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.EPS.GraphicsIO.Pdf.PDFFontEmbedder" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.EPS.GraphicsIO.Pdf.PDFGraphics2D.ShowCharacterCodes(System.String)" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.EPS.GraphicsIO.Pdf.PDFPaintDelayQueue" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.EPS.GraphicsIO.Pdf.PDFRedundanceTracker.GetReference(System.Object,System.Object,Aspose.EPS.GraphicsIO.Pdf.PDFRedundanceTracker.Writer)" -->
    <member name="T:Aspose.EPS.Ps2PdfConverter">
      <summary>
            This class converts PS/EPS files to PDF documents.
            </summary>
    </member>
    <member name="M:Aspose.EPS.Ps2PdfConverter.ConvertToPdf(Aspose.EPS.Ps2PdfConverterOptions)">
      <summary>
            Converts PS/EPS file to PDF document </summary>
      <param name="options"> Contains input and output streams, page size and flags that specify output of errors thrown during conversion. </param>
    </member>
    <member name="P:Aspose.EPS.Ps2PdfConverter.NumberOfPages">
      <summary>
            Returns the number of pages in resulting PDF document. </summary>
    </member>
    <member name="T:Aspose.EPS.Ps2PdfConverterException">
      <summary>
            This class contains information about an error that is
            thrown while PS file is converted to PDF document.
            </summary>
    </member>
    <member name="M:Aspose.EPS.Ps2PdfConverterException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.EPS.Ps2PdfConverterException" /> class.
            </summary>
      <param name="errorStr"> The string that describes a reason of coversion error.</param>
    </member>
    <member name="T:Aspose.EPS.Ps2PdfConverterOptions">
      <summary>
            This class contains input and output streams and other options necessary for managing conversion process.
            </summary>
    </member>
    <member name="M:Aspose.EPS.Ps2PdfConverterOptions.#ctor(System.IO.Stream,System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.EPS.Ps2PdfConverterOptions" /> class with default page size 595x842 ppt
            and default values for flags <see cref="!:SuppressErrors" /> (true) and <see cref="P:Aspose.EPS.Ps2PdfConverterOptions.Debug" /> (false).
            </summary>
      <param name="psStream"> Input stream, that should contain PostScript code.</param>
      <param name="pdfStream"> Output stream.</param>
    </member>
    <member name="M:Aspose.EPS.Ps2PdfConverterOptions.#ctor(System.IO.Stream,System.IO.Stream,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.EPS.Ps2PdfConverterOptions" /> class with default page size 595x842 ppt
            and default values for flags <see cref="!:SuppressErrors" /> (true) and <see cref="P:Aspose.EPS.Ps2PdfConverterOptions.Debug" /> (false).
            </summary>
      <param name="psStream"> Input stream, that should contain PostScript code.</param>
      <param name="pdfStream"> Output stream.</param>
      <param name="supressErrors"> Specifies whether errors must be suppressed or not.
            If true suppressed errors are added to <see cref="P:Aspose.EPS.Ps2PdfConverterOptions.Exceptions" /> list.</param>
    </member>
    <member name="P:Aspose.EPS.Ps2PdfConverterOptions.PsStream">
      <summary>
            Specifies an input stream, that should contain PostScript code.
            </summary>
    </member>
    <member name="P:Aspose.EPS.Ps2PdfConverterOptions.SupressErrors">
      <summary>
            Specifies whether errors must be suppressed or not.
            If true suppressed errors are added to <see cref="P:Aspose.EPS.Ps2PdfConverterOptions.Exceptions" /> list.
            If false the first error will terminate the program.
            </summary>
    </member>
    <member name="P:Aspose.EPS.Ps2PdfConverterOptions.Exceptions">
      <summary>
            Returns a list of suppressed conversion errors If <see cref="!:SuppressErrors" /> is true.
            </summary>
    </member>
    <member name="P:Aspose.EPS.Ps2PdfConverterOptions.PageSize">
      <summary>
            Specifies a page size for resulting PDF document.
            Default value is 595x842 ppt.
            </summary>
    </member>
    <member name="P:Aspose.EPS.Ps2PdfConverterOptions.PdfStream">
      <summary>
            Specifies an output stream, that PDF content will be written to.
            </summary>
    </member>
    <member name="P:Aspose.EPS.Ps2PdfConverterOptions.Debug">
      <summary>
            Specifies whether debug information must be printed to standard output stream or not.
            </summary>
    </member>
    <member name="P:Aspose.EPS.Ps2PdfConverterOptions.FontsFolders">
      <summary>
            Specifies additional folders where converter should find fonts for input PostScript file.
            Default folder are standard fonts folder where OS finds fonts for internal needs.
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "T:Aspose.EPS.Util.Io.StandardFileFilter" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.EPS.Util.IO.PushbackInputStream.#ctor(Aspose.EPS.Util.IO.StreamEx,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.EPS.Util.IO.PushbackInputStream.Read" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.EPS.Util.IO.PushbackInputStream.Read(System.Byte[],System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.EPS.Util.IO.PushbackInputStream.Skip(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.EPS.Util.Stack.CopyInto(System.Object[])" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.EPS.Util.Stack.EnsureCapacityHelper(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.EPS.Util.Stack.Elements" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.EPS.Util.Stack.Contains(System.Object)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.EPS.Util.Stack.IndexOf(System.Object)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.EPS.Util.Stack.IndexOf(System.Object,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.EPS.Util.Stack.LastIndexOf(System.Object)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.EPS.Util.Stack.LastIndexOf(System.Object,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.EPS.Util.Stack.ElementAt(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.EPS.Util.Stack.LastElement" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.EPS.Util.Stack.SetElementAt(System.Object,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.EPS.Util.Stack.RemoveElementAt(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.EPS.Util.Stack.InsertElementAt(System.Object,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.EPS.Util.Stack.Get(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.EPS.Util.Stack.Set(System.Int32,System.Object)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.EPS.Util.Stack.Add(System.Int32,System.Object)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.EPS.Util.Stack.Remove(System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.EPS.Util.Stack.addAll(System.Int32,System.Collections.ICollection)" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.Foundation.sfntly.typography.font.sfntly.table.core.CMap" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.Foundation.sfntly.typography.font.sfntly.table.SubTable.Builder" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.Foundation.sfntly.typography.font.sfntly.table.TableBasedTableBuilder" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.Foundation.sfntly.typography.font.sfntly.data.ByteArray" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.Foundation.sfntly.typography.font.sfntly.data.FontInputStream" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.Foundation.sfntly.typography.font.sfntly.data.FontOutputStream" -->
    <!-- Badly formed XML comment ignored for member "T:Aspose.Foundation.sfntly.typography.font.sfntly.data.ReadableFontData" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Foundation.sfntly.typography.font.sfntly.data.ReadableFontData.ComputeCheckSum(System.Int32,System.Int32)" -->
    <!-- Badly formed XML comment ignored for member "M:Aspose.Foundation.sfntly.typography.font.sfntly.Font.getTable(System.Int32)" -->
  </members>
</doc>